name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '18'

jobs:
  # Backend Testing and Security Scan
  backend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run backend tests
      working-directory: ./backend
      run: |
        chmod +x mvnw
        ./mvnw clean test
    
    - name: Generate test report
      working-directory: ./backend
      run: ./mvnw jacoco:report
    
    - name: Upload test coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/target/site/jacoco/jacoco.xml
        flags: backend
        name: backend-coverage
    
    - name: Run security vulnerability scan
      working-directory: ./backend
      run: ./mvnw org.owasp:dependency-check-maven:check
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: ./backend/target/dependency-check-report.html

  # Frontend Testing
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: |
        if [ -f package.json ]; then
          npm ci
        else
          echo "No package.json found, skipping npm install"
        fi
    
    - name: Run frontend tests
      working-directory: ./frontend
      run: |
        if [ -f package.json ] && [ -n "$(npm run | grep test)" ]; then
          npm run test
        else
          echo "No frontend tests configured, running basic validation"
          # Basic HTML/CSS/JS validation
          find . -name "*.html" -exec echo "Validating {}" \;
          find . -name "*.js" -exec node -c {} \;
        fi
    
    - name: Run ESLint (if configured)
      working-directory: ./frontend
      run: |
        if [ -f package.json ] && [ -n "$(npm run | grep lint)" ]; then
          npm run lint
        else
          echo "ESLint not configured, skipping"
        fi

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Test Docker Images
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile
        push: false
        tags: taskmanager-${{ matrix.service }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-${{ matrix.service }} taskmanager-${{ matrix.service }}:latest
        sleep 10
        docker logs test-${{ matrix.service }}
        docker stop test-${{ matrix.service }}

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
    
    - name: Run integration tests
      run: |
        docker-compose up -d --build
        sleep 30
        
        # Wait for services to be healthy
        docker-compose ps
        
        # Test backend API
        curl -f http://localhost:8080/api/actuator/health || exit 1
        curl -f http://localhost:8080/api/tasks || exit 1
        
        # Test frontend
        curl -f http://localhost:8081/health || exit 1
        
        # Cleanup
        docker-compose down -v

  # Code Quality Analysis
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=taskmanager-v2
          -Dsonar.organization=your-org
          -Dsonar.sources=.
          -Dsonar.exclusions=**/target/**,**/node_modules/**
          -Dsonar.java.source=21

  # Deployment (runs only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan, code-quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment script here
        # For example: kubectl apply -f k8s/ or aws ecs update-service
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke tests here
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # Publish artifacts
  publish:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Build and publish Docker images
      env:
        DOCKER_REGISTRY: ghcr.io
        DOCKER_USERNAME: ${{ github.actor }}
        DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo $DOCKER_PASSWORD | docker login $DOCKER_REGISTRY -u $DOCKER_USERNAME --password-stdin
        
        # Build and push backend
        docker build -t $DOCKER_REGISTRY/${{ github.repository }}/backend:latest ./backend
        docker push $DOCKER_REGISTRY/${{ github.repository }}/backend:latest
        
        # Build and push frontend
        docker build -t $DOCKER_REGISTRY/${{ github.repository }}/frontend:latest ./frontend
        docker push $DOCKER_REGISTRY/${{ github.repository }}/frontend:latest